// Main build script for WebView App
// 
// Usage: gradlew assembleDebug           Build debug APK
//        gradlew assembleRelease         Build production APK
//        gradle wrapper                  Create Gradle Wrapper


final VERSION_MAJOR = 2 // max two digits
final VERSION_MINOR = 3 // max two digits
final VERSION_PATCH = 0 // max two digits
final VERSION_BUILD = 0 // max three digits


apply plugin: 'com.android.application'


dependencies
        {
            compile fileTree(dir: 'libs', include: ['*.jar'])
            compile 'com.android.support:support-v4:23.4.0'
            compile 'com.android.support:appcompat-v7:23.4.0'
            compile 'com.android.support:design:23.4.0'
            compile 'com.google.android.gms:play-services-location:8.4.0'
            compile 'com.google.android.gms:play-services-analytics:8.4.0'
            compile 'com.google.android.gms:play-services-gcm:8.1.0'
            compile 'com.onesignal:OneSignal:2.6.1@aar'
            compile 'com.google.android.gms:play-services:9.0.2'
            compile 'com.android.support:multidex:1.0.1'
            compile 'com.android.support:cardview-v7:23.1.1'
        }


android
        {
            compileSdkVersion 23
            buildToolsVersion "23.0.2"

            defaultConfig
                    {
                        applicationId "com.swatiag1101.bingrrr1"
                        minSdkVersion 19
                        targetSdkVersion 23
                        versionCode VERSION_MAJOR * 10000000 + VERSION_MINOR * 100000 + VERSION_PATCH * 1000 + VERSION_BUILD
                        versionName "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}"
                        multiDexEnabled true
                        // app id and Google project number for OneSignal push notifications,
                        // leave these constants empty if you do not want to use push notifications,
                        // see https://documentation.onesignal.com for more info
                        manifestPlaceholders = [manifestApplicationId          : "${applicationId}",
                                                onesignal_app_id               : "", //insert your app id
                                                onesignal_google_project_number: ""]  //insert your project number
                    }

            signingConfigs
                    {
                        release
                                {
                                    // passwords and alias are obtained via askForPasswords task
                                    storeFile file("../${project.property('keystore.file')}")
                                    storePassword ""
                                    keyAlias ""
                                    keyPassword ""
                                }
                    }

            buildTypes
                    {
                        debug
                                {
                                    buildConfigField "boolean", "LOGS", "true"

                                    versionNameSuffix "-debug"
                                }

                        release
                                {
                                    buildConfigField "boolean", "LOGS", "false"
                                    signingConfig signingConfigs.release
                                    zipAlignEnabled true
                                    minifyEnabled false
                                    shrinkResources false
                                    proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                                }
                    }

            applicationVariants.all
                    {
                        variant ->
                            if (variant.buildType.name.equals("release")) {
                                variant.outputs.each
                                        {
                                            output ->
                                                def outputFile = output.outputFile
                                                def date = new Date()
                                                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                                                    def fileName = outputFile.name.replace(
                                                            "mobile",
                                                            "bingrrr-" + defaultConfig.versionName + "-" + date.format('yyyyMMdd'))
                                                    output.outputFile = new File((String) outputFile.parent, (String) fileName)
                                                }
                                        }
                            }
                    }
        }


task askForPasswords <<
        {
            def storePass
            def keyAlias
            def keyPass

            def keystorePropertiesFile = new File((String) project.property("keystore.properties"))

            if (project.hasProperty("keystore.properties") && keystorePropertiesFile.exists()) {
                println "Loading keystore passwords from property file..."
                Properties properties = new Properties()
                properties.load(new FileInputStream(keystorePropertiesFile))
                storePass = properties['keystore.store.password']
                keyAlias = properties['keystore.key.alias']
                keyPass = properties['keystore.key.password']
            } else {
                println "Getting keystore passwords from user input..."
                storePass = new String(System.console().readPassword("\nStore password: "))
                keyAlias = new String(System.console().readLine("Key alias: "))
                keyPass = new String(System.console().readPassword("Key password: "))
            }

            android.signingConfigs.release.storePassword = storePass
            android.signingConfigs.release.keyAlias = keyAlias
            android.signingConfigs.release.keyPassword = keyPass
        }


tasks.whenTaskAdded
        {
            theTask ->
                if (theTask.name.equals("packageRelease")) {
                    theTask.dependsOn "askForPasswords"
                }
        }
